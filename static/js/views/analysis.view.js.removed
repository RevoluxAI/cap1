/**
 * Visualização para componentes relacionados a análises
 */
import { CONFIG } from '../config.js';
import { WeatherService } from '../services/weather.service.js';

export class AnalysisView {
    /**
     * Inicializa a visualização de análise
     */
    constructor() {
        this.initTabs();
    }
    
    /**
     * Inicializa as abas de análise
     */
    initTabs() {
        // Quando o DOM estiver completamente carregado
        document.addEventListener('DOMContentLoaded', () => {
            // Configurar evento de clique nas abas
            document.querySelectorAll('#analysisTabs .nav-link').forEach(tabEl => {
                tabEl.addEventListener('click', (e) => {
                    e.preventDefault();
                    const tabTarget = tabEl.getAttribute('href');
                    this.activateTab(tabTarget);
                });
            });
        });
    }
    
    /**
     * Ativa uma aba específica
     * @param {string} tabId - ID da aba a ser ativada
     */
    activateTab(tabId) {
        // Remover classe active de todas as abas
        document.querySelectorAll('#analysisTabs .nav-link').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Remover classe active de todos os conteúdos
        document.querySelectorAll('.tab-pane').forEach(content => {
            content.classList.remove('show', 'active');
        });
        
        // Ativar aba selecionada
        const selectedTab = document.querySelector(`#analysisTabs .nav-link[href="${tabId}"]`);
        if (selectedTab) {
            selectedTab.classList.add('active');
        }
        
        // Ativar conteúdo selecionado
        const selectedContent = document.querySelector(tabId);
        if (selectedContent) {
            selectedContent.classList.add('show', 'active');
        }
    }
    
    /**
     * Exibe o prompt de seleção de cultura
     * @param {string} message - Mensagem a ser exibida
     */
    showSelectionPrompt(message = 'Selecione uma cultura na aba "Culturas" para visualizar a análise.') {
        document.getElementById('analysis-select-prompt').style.display = 'block';
        document.getElementById('analysis-content').style.display = 'none';
        document.getElementById('analysis-select-prompt').innerHTML = `
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                ${message}
            </div>
        `;
    }
    
    /**
     * Exibe mensagem de carregamento
     */
    showLoading() {
        document.getElementById('analysis-select-prompt').style.display = 'block';
        document.getElementById('analysis-content').style.display = 'none';
        document.getElementById('analysis-select-prompt').innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
                <p class="mt-2">Carregando análise...</p>
            </div>
        `;
    }
    
    /**
     * Renderiza análise com melhorias para soja
     * @param {AnalysisModel} analysisModel - Modelo de análise
     */
    renderAnalysis(analysisModel) {
        console.log("Renderizando análise:", analysisModel);
        console.log("isComplete():", analysisModel.isComplete());
        
        if (!analysisModel.isComplete()) {
            this.showSelectionPrompt('Dados de análise incompletos ou não disponíveis.');
            console.error('Análise incompleta:', 
                         'cultureId:', analysisModel.cultureId, 
                         'cultureInfo:', analysisModel.cultureInfo);
            return;
        }
        
        const culture = analysisModel.cultureInfo;
        
        // Log para depuração das recomendações de soja
        if (analysisModel.isSoy()) {
            console.log("Cultura de Soja detectada:", culture);
            console.log("Recomendações disponíveis:", culture.recomendacoes);
        }
        
        // Atualizar título principal da página com informações da cultura
        document.getElementById('analysis-culture-title').innerHTML = `
            Cultura <span class="text-primary">#${analysisModel.cultureId}</span>: ${culture.tipo}
            <span class="badge bg-secondary ms-2">${culture.area} hectares</span>
        `;
        
        // Remover os badges separados que agora estão no título
        document.getElementById('analysis-culture-type').style.display = 'none';
        document.getElementById('analysis-culture-area').style.display = 'none';
        
        // Renderizar JSON para aba de dados brutos
        document.getElementById('json-data').textContent = JSON.stringify(analysisModel, null, 2);
        
        // Configurar botão de cópia de JSON
        document.getElementById('btn-copy-json').addEventListener('click', () => {
            navigator.clipboard.writeText(document.getElementById('json-data').textContent)
                .then(() => {
                    // Disparar evento para notificar cópia bem sucedida
                    document.dispatchEvent(new CustomEvent('json:copied'));
                })
                .catch(err => {
                    console.error('Erro ao copiar JSON:', err);
                });
        });
        
        // IMPORTANTE: Renderizando recomendações específicas de cultura
        // Ordem importante: primeiro as recomendações específicas, depois as gerais
        
        // Para cana-de-açúcar
        if (analysisModel.isSugarcane() && analysisModel.sugarcaneRecommendations) {
            console.log("Renderizando recomendações para cana-de-açúcar", analysisModel.sugarcaneRecommendations);
            this.renderSugarcaneRecommendations(analysisModel.sugarcaneRecommendations, culture);
        }

        // Para soja - CORREÇÃO: Verificação mais robusta dos dados
        if (analysisModel.isSoy()) {
            // Verificar de onde vêm as recomendações (pode ser da cultura ou de outra fonte)
            let soybeanRecommendations = null;
            
            if (culture.recomendacoes) {
                soybeanRecommendations = culture.recomendacoes;
                console.log("Usando recomendações da cultura:", soybeanRecommendations);
            } else if (analysisModel.recommendations && analysisModel.recommendations.data && 
                      analysisModel.recommendations.data.soy_specific) {
                soybeanRecommendations = analysisModel.recommendations.data.soy_specific;
                console.log("Usando recomendações de soy_specific:", soybeanRecommendations);
            }
            
            if (soybeanRecommendations) {
                console.log("Renderizando recomendações para soja", soybeanRecommendations);
                this.renderSoybeanRecommendations(soybeanRecommendations, culture);
            } else {
                console.warn("Sem recomendações disponíveis para soja");
            }
        }

        // Renderizar recomendações gerais (independente do tipo de cultura)
        if (analysisModel.hasRecommendations()) {
            this.renderRecommendations(analysisModel.recommendations);
        } else {
            document.getElementById('recommendation-summary').innerHTML = '<div class="alert alert-warning">Nenhuma recomendação disponível</div>';
            document.getElementById('basic-recommendations').innerHTML = '';
            document.getElementById('specific-recommendations').innerHTML = '';
            document.getElementById('inputs-recommendations').innerHTML = '';
        }
        
        if (analysisModel.hasWeatherData()) {
            this.renderWeatherInfo(analysisModel);
        } else {
            document.getElementById('current-weather').innerHTML = '<div class="alert alert-warning">Nenhum dado meteorológico disponível</div>';
            document.getElementById('weather-impact').innerHTML = '';
        }
        
        // Renderizar estatísticas
        this.renderCultureStats(analysisModel);
        
        // Exibir o conteúdo da análise
        document.getElementById('analysis-select-prompt').style.display = 'none';
        document.getElementById('analysis-content').style.display = 'block';
        
        // Ativar a aba de recomendações por padrão
        this.activateTab('#tab-recommendations');
    }
    
    /**
     * Renderiza recomendações específicas para soja
     * @param {Object} recommendations - Recomendações para soja
     * @param {Object} culture - Dados da cultura
     */
    renderSoybeanRecommendations(recommendations, culture) {
        // Log detalhado para depuração
        console.log("Executando renderSoybeanRecommendations com:", recommendations);
        
        // Verificação de segurança - se os dados não estão completos, não tenta renderizar
        if (!recommendations || !recommendations.variedade_info || 
            !recommendations.espacamento || !recommendations.area || 
            !recommendations.irrigacao) {
            console.error("Dados de recomendações incompletos para soja:", recommendations);
            return;
        }
        
        // Verificar se section já existe, caso não, criar
        let soybeanSectionEl = document.getElementById('soybean-recommendations-section');
        if (!soybeanSectionEl) {
            // Verificar se o container de recomendações existe
            const recommendationsTab = document.getElementById('tab-recommendations');
            if (!recommendationsTab) {
                console.error("Container de recomendações não encontrado");
                return;
            }
            
            // Criar seção para recomendações de soja
            soybeanSectionEl = document.createElement('div');
            soybeanSectionEl.id = 'soybean-recommendations-section';
            soybeanSectionEl.className = 'card mb-4';
            
            // Adicionar após o resumo da análise
            const summaryEl = document.getElementById('recommendation-summary');
            if (summaryEl && summaryEl.parentElement && summaryEl.parentElement.parentElement) {
                const parentEl = summaryEl.parentElement.parentElement;
                parentEl.parentNode.insertBefore(soybeanSectionEl, parentEl.nextSibling);
            } else {
                // Fallback se a estrutura esperada não for encontrada
                recommendationsTab.appendChild(soybeanSectionEl);
            }
        }
        
        // Função auxiliar para obter classe de status
        const getStatusClass = (status) => {
            switch(status) {
                case 'adequado':
                case 'adequada':
                    return 'bg-success';
                case 'abaixo':
                    return 'bg-warning';
                case 'acima':
                    return 'bg-info';
                default:
                    return 'bg-primary';
            }
        };
        


        /**
         * Calcula a largura percentual da barra de progresso baseado no valor real
         * @param {number} value - Valor atual
         * @param {Object} recommended - Objeto com min, max e ideal
         * @returns {number} - Percentual para largura da barra (0-100)
         */
        const getProgressWidth = (value, recommended) => {
            if (!recommended || typeof value !== 'number') return 50;
            
            const min = recommended.min;
            const max = recommended.max;
            const ideal = recommended.ideal || ((min + max) / 2);
            
            // Definir amplitude total da escala considerando 50% de margem
            const lowerBound = min - (min * 0.5);
            const upperBound = max + (max * 0.5);
            const totalRange = upperBound - lowerBound;
            
            // Calcular posição relativa do valor nessa amplitude
            let percentage = ((value - lowerBound) / totalRange) * 100;
            
            // Limitar entre 0% e 100%
            return Math.max(0, Math.min(100, percentage));
        };

        /**
         * Calcula a largura percentual da barra de progresso para área
         * que pode não ter um valor máximo definido
         * @param {number} value - Valor atual
         * @param {Object} recommended - Objeto com min, max e ideal
         * @returns {number} - Percentual para largura da barra (0-100)
         */
        const getAreaProgressWidth = (value, recommended) => {
            if (!recommended || typeof value !== 'number') return 50;
            
            const min = recommended.min;
            const max = recommended.max || (min * 5); // Se não houver máximo, considera 5x o mínimo
            const ideal = recommended.ideal || ((min + max) / 2);
            
            // Mesma lógica do getProgressWidth, mas adaptada para casos sem máximo definido
            const lowerBound = min - (min * 0.5);
            const upperBound = max + (max * 0.5);
            const totalRange = upperBound - lowerBound;
            
            let percentage = ((value - lowerBound) / totalRange) * 100;
            return Math.max(0, Math.min(100, percentage));
        };


        
        // Criar HTML para recomendações detalhadas
        let html = `
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">Recomendações para Soja (Variedade ${culture.variedade || 'Não especificada'})</h5>
            </div>
            <div class="card-body">
        `;
        
        // Adicionar informações da variedade
        html += `
            <div class="alert alert-info">
                <strong>Informações da Variedade:</strong> ${recommendations.variedade_info.duracao} - ${recommendations.variedade_info.descricao}
            </div>
        `;
        
        // Grid para parâmetros
        html += `<div class="row">`;
        
        // Coluna para espaçamento
        html += `
            <div class="col-md-6">
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">Espaçamento entre Linhas</h6>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 20px;">
                            <div class="progress-bar ${getStatusClass(recommendations.espacamento.status)}" 
                                 style="width: ${getProgressWidth(culture.espacamento, recommendations.espacamento.recomendado)}%">
                                ${culture.espacamento} m
                            </div>
                        </div>
                        <p>${recommendations.espacamento.mensagem}</p>
                        <div class="small text-muted">
                            Recomendado: ${recommendations.espacamento.recomendado.min}-${recommendations.espacamento.recomendado.max} m 
                            (ideal: ${recommendations.espacamento.recomendado.ideal} m)
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Coluna para área
        html += `
            <div class="col-md-6">
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">Área de Cultivo</h6>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 20px;">
                            <div class="progress-bar ${getStatusClass(recommendations.area.status)}" 
                                 style="width: ${getAreaProgressWidth(culture.area, recommendations.area.recomendado)}%">
                                ${culture.area} ha
                            </div>
                        </div>
                        <p>${recommendations.area.mensagem}</p>
                        <div class="small text-muted">
                            Recomendado: ${recommendations.area.recomendado.min} ha ${recommendations.area.recomendado.max ? '- ' + recommendations.area.recomendado.max + ' ha' : 'ou mais'} 
                            (ideal: ${recommendations.area.recomendado.ideal} ha)
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        html += `</div>`; // Fim da row
        
        // Informações sobre irrigação
        const irrigClass = culture.irrigacao ? 'success' : 'warning';
        const irrigIcon = culture.irrigacao ? 'check-circle' : 'exclamation-triangle';
        
        html += `
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Sistema de Irrigação</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="fs-3 me-3 text-${irrigClass}">
                            <i class="fas fa-${irrigIcon}"></i>
                        </div>
                        <div>
                            <div class="fw-bold">Status: ${culture.irrigacao ? 'Ativado' : 'Não Ativado'}</div>
                            <div>${recommendations.irrigacao.mensagem}</div>
                        </div>
                    </div>
                    
                    <h6>Recomendações para Esta Variedade:</h6>
                    
                    <!-- Substituindo a lista-grupo com layout de tabela por cards individuais para cada item -->
                    <div class="row g-3 mt-2">
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">Sistema</h6>
                                </div>
                                <div class="card-body d-flex align-items-center">
                                    <span class="badge bg-primary px-3 py-2">${recommendations.irrigacao.sistema}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">Volume</h6>
                                </div>
                                <div class="card-body d-flex align-items-center">
                                    <span class="badge bg-primary px-3 py-2">${recommendations.irrigacao.volume}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">Frequência</h6>
                                </div>
                                <div class="card-body">
                                    <span class="badge bg-primary px-3 py-2 text-wrap">${recommendations.irrigacao.frequencia}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">
                                    <h6 class="mb-0">Eficiência</h6>
                                </div>
                                <div class="card-body">
                                    <span class="badge bg-primary px-3 py-2 text-wrap">${recommendations.irrigacao.eficiencia}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        html += `</div>`; // Fim do card-body
        
        // Atualizar conteúdo da seção
        soybeanSectionEl.innerHTML = html;
        console.log("Renderização das recomendações de soja concluída com sucesso");
    }

    /**
     * Limpa a visualização de análise
     */
    clearAnalysis() {
        document.getElementById('analysis-culture-title').innerHTML = '';
        document.getElementById('analysis-culture-type').style.display = 'inline-block';
        document.getElementById('analysis-culture-area').style.display = 'inline-block';
        document.getElementById('analysis-culture-type').textContent = '';
        document.getElementById('analysis-culture-area').textContent = '';
        document.getElementById('json-data').textContent = '';
        document.getElementById('recommendation-summary').innerHTML = '';
        document.getElementById('basic-recommendations').innerHTML = '';
        document.getElementById('specific-recommendations').innerHTML = '';
        document.getElementById('inputs-recommendations').innerHTML = '';
        document.getElementById('current-weather').innerHTML = '';
        document.getElementById('weather-impact').innerHTML = '';
        document.getElementById('culture-stats').innerHTML = '';
        document.getElementById('culture-projections').innerHTML = '';
        
        // Remover seções dinâmicas
        const dynamicSections = [
            'sugarcane-recommendations-section',
            'soybean-recommendations-section',
            'monitoring-section',
            'environmental-section',
            'data-analysis-section',
            'stat-models-section'
        ];
        
        dynamicSections.forEach(id => {
            const section = document.getElementById(id);
            if (section) {
                section.remove();
            }
        });
        
        // Mostrar prompt de seleção
        this.showSelectionPrompt();
    }

    /**
     * Renderiza recomendações específicas para cana-de-açúcar
     * @param {Object} recommendations - Recomendações para cana-de-açúcar
     * @param {Object} culture - Dados da cultura
     */
    renderSugarcaneRecommendations(recommendations, culture) {
        // Verificar se section já existe, caso não, criar
        let sugarcaneSectionEl = document.getElementById('sugarcane-recommendations-section');
        if (!sugarcaneSectionEl) {
            const recommendationsContainer = document.getElementById('tab-recommendations');
            
            // Criar seção para recomendações de cana-de-açúcar
            sugarcaneSectionEl = document.createElement('div');
            sugarcaneSectionEl.id = 'sugarcane-recommendations-section';
            sugarcaneSectionEl.className = 'card mb-4';
            
            // Adicionar depois do resumo da análise
            const summaryEl = document.getElementById('recommendation-summary').parentElement.parentElement;
            summaryEl.parentNode.insertBefore(sugarcaneSectionEl, summaryEl.nextSibling);
        }
        
        // Função auxiliar para obter classe de status
        const getStatusClass = (status) => {
            switch(status) {
                case 'adequado':
                case 'adequada':
                    return 'bg-success';
                case 'abaixo':
                    return 'bg-warning';
                case 'acima':
                    return 'bg-info';
                default:
                    return 'bg-primary';
            }
        };
        
        // Função auxiliar para calcular largura da barra de progresso
        const getProgressWidth = (value, recommended) => {
            // Calcula a posição na escala em porcentagem
            if (value < recommended.min) {
                return (value / recommended.min) * 33; // Menos de 33% para valores abaixo do mínimo
            } else if (value > recommended.max) {
                const excess = value - recommended.max;
                const range = recommended.max - recommended.min;
                return 66 + Math.min((excess / range) * 34, 34); // Entre 66% e 100% para valores acima do máximo
            } else {
                // Valor dentro do intervalo recomendado
                const position = (value - recommended.min) / (recommended.max - recommended.min);
                return 33 + position * 33; // Entre 33% e 66% para valores no intervalo
            }
        };
        
        // Função auxiliar para calcular largura da barra de progresso para área
        const getAreaProgressWidth = (value, recommended) => {
            // Calcula a posição na escala em porcentagem para área
            // Diferente do espaçamento porque pode não ter limite máximo
            if (value < recommended.min) {
                return (value / recommended.min) * 33; // Menos de 33% para valores abaixo do mínimo
            } else if (recommended.max && value > recommended.max) {
                const excess = value - recommended.max;
                const range = recommended.max - recommended.min;
                return 66 + Math.min((excess / range) * 34, 34); // Entre 66% e 100% para valores acima do máximo
            } else {
                // Valor dentro do intervalo recomendado ou acima do mínimo quando não há máximo
                if (recommended.max) {
                    const position = (value - recommended.min) / (recommended.max - recommended.min);
                    return 33 + position * 33; // Entre 33% e 66% para valores no intervalo
                } else {
                    // Se não tem máximo, usar o dobro do mínimo como referência
                    const position = Math.min((value - recommended.min) / recommended.min, 1);
                    return 33 + position * 33; // Entre 33% e 66% para valores acima do mínimo
                }
            }
        };
        
        // Criar HTML para recomendações detalhadas
        let html = `
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Recomendações para Cana-de-Açúcar (Ciclo ${culture.ciclo})</h5>
            </div>
            <div class="card-body">
        `;
        
        // Adicionar informações do ciclo
        html += `
            <div class="alert alert-info">
                <strong>Informações do Ciclo:</strong> ${recommendations.ciclo_info.duracao} - ${recommendations.ciclo_info.descricao}
            </div>
        `;
        
        // Grid para parâmetros
        html += `<div class="row">`;
        
        // Coluna para espaçamento
        html += `
            <div class="col-md-6">
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">Espaçamento entre Linhas</h6>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 20px;">
                            <div class="progress-bar ${getStatusClass(recommendations.espacamento.status)}" 
                                 style="width: ${getProgressWidth(culture.espacamento, recommendations.espacamento.recomendado)}%">
                                ${culture.espacamento} m
                            </div>
                        </div>
                        <p>${recommendations.espacamento.mensagem}</p>
                        <div class="small text-muted">
                            Recomendado: ${recommendations.espacamento.recomendado.min}-${recommendations.espacamento.recomendado.max} m 
                            (ideal: ${recommendations.espacamento.recomendado.ideal} m)
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Coluna para área
        html += `
            <div class="col-md-6">
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">Área de Cultivo</h6>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3" style="height: 20px;">
                            <div class="progress-bar ${getStatusClass(recommendations.area.status)}" 
                                 style="width: ${getAreaProgressWidth(culture.area, recommendations.area.recomendado)}%">
                                ${culture.area} ha
                            </div>
                        </div>
                        <p>${recommendations.area.mensagem}</p>
                        <div class="small text-muted">
                            Recomendado: ${recommendations.area.recomendado.min} ha ${recommendations.area.recomendado.max ? '- ' + recommendations.area.recomendado.max + ' ha' : 'ou mais'} 
                            (ideal: ${recommendations.area.recomendado.ideal} ha)
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        html += `</div>`; // Fim da row
        
        // Informações sobre irrigação
        const irrigClass = culture.irrigacao ? 'success' : 'warning';
        const irrigIcon = culture.irrigacao ? 'check-circle' : 'exclamation-triangle';
        
        html += `
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Sistema de Irrigação</h6>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="fs-3 me-3 text-${irrigClass}">
                            <i class="fas fa-${irrigIcon}"></i>
                        </div>
                        <div>
                            <div class="fw-bold">Status: ${culture.irrigacao ? 'Ativado' : 'Não Ativado'}</div>
                            <div>${recommendations.irrigacao.mensagem}</div>
                        </div>
                    </div>
                    
                    <h6>Recomendações para Este Ciclo:</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="list-group">
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    Sistema
                                    <span class="badge bg-primary rounded-pill">${recommendations.irrigacao.sistema}</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    Frequência
                                    <span class="badge bg-primary rounded-pill">${recommendations.irrigacao.frequencia}</span>
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <ul class="list-group">
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    Volume
                                    <span class="badge bg-primary rounded-pill">${recommendations.irrigacao.volume}</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    Eficiência
                                    <span class="badge bg-primary rounded-pill">${recommendations.irrigacao.eficiencia}</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        html += `</div>`; // Fim do card-body
        
        // Atualizar conteúdo da seção
        sugarcaneSectionEl.innerHTML = html;
    }
    
    /**
     * Renderiza informações meteorológicas
     * @param {AnalysisModel} analysisModel - Modelo de análise
     */
    renderWeatherInfo(analysisModel) {
        const weatherData = WeatherService.extractWeatherData(analysisModel.currentWeather || analysisModel.weatherData);
        
        if (!weatherData) {
            document.getElementById('current-weather').innerHTML = '<div class="alert alert-warning">Nenhum dado meteorológico disponível</div>';
            document.getElementById('weather-impact').innerHTML = '';
            return;
        }
        
        // Formatação para condições atuais
        let currentWeatherHtml = `
            <div class="d-flex align-items-center mb-3">
                <div class="display-4 me-3">${Math.round(weatherData.temperature || 0)}°C</div>
                <div>
                    <div class="h5">${weatherData.main_condition || 'Desconhecido'}</div>
                    <div>${weatherData.description || ''}</div>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="mb-2">
                        <i class="fas fa-tint me-2"></i>Umidade: ${weatherData.humidity || 0}%
                    </div>
                    <div class="mb-2">
                        <i class="fas fa-wind me-2"></i>Vento: ${weatherData.wind_speed || 0} km/h
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-2">
                        <i class="fas fa-temperature-high me-2"></i>Máx: ${Math.round(weatherData.temp_max || weatherData.temperature || 0)}°C
                    </div>
                    <div class="mb-2">
                        <i class="fas fa-temperature-low me-2"></i>Mín: ${Math.round(weatherData.temp_min || weatherData.temperature || 0)}°C
                    </div>
                </div>
            </div>
            
            <!-- Análises detalhadas dos parâmetros meteorológicos -->
            <div class="mt-4">
                <h6 class="fw-bold">Análises Detalhadas</h6>
                <div class="row mt-2">
        `;
        
        // Adicionar análise de temperatura se disponível
        if (weatherData.temperature_analysis) {
            currentWeatherHtml += `
                <div class="col-md-4 mb-3">
                    <div class="card h-100">
                        <div class="card-header bg-danger text-white">
                            <h6 class="mb-0"><i class="fas fa-thermometer-half me-2"></i>Temperatura</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Status:</span>
                                <span class="badge bg-${WeatherService.getWeatherStatusClass(weatherData.temperature_analysis.status)}">${WeatherService.formatWeatherStatus(weatherData.temperature_analysis.status)}</span>
                            </div>
                            <p class="small">${weatherData.temperature_analysis.impact}</p>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Adicionar análise de umidade se disponível
        if (weatherData.humidity_analysis) {
            currentWeatherHtml += `
                <div class="col-md-4 mb-3">
                    <div class="card h-100">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0"><i class="fas fa-tint me-2"></i>Umidade</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Status:</span>
                                <span class="badge bg-${WeatherService.getWeatherStatusClass(weatherData.humidity_analysis.status)}">${WeatherService.formatWeatherStatus(weatherData.humidity_analysis.status)}</span>
                            </div>
                            <p class="small">${weatherData.humidity_analysis.impact}</p>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Adicionar análise de vento se disponível
        if (weatherData.wind_analysis) {
            currentWeatherHtml += `
                <div class="col-md-4 mb-3">
                    <div class="card h-100">
                        <div class="card-header bg-secondary text-white">
                            <h6 class="mb-0"><i class="fas fa-wind me-2"></i>Vento</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-2">
                                <span>Status:</span>
                                <span class="badge bg-${WeatherService.getWeatherStatusClass(weatherData.wind_analysis.status)}">${WeatherService.formatWeatherStatus(weatherData.wind_analysis.status)}</span>
                            </div>
                            <p class="small">${weatherData.wind_analysis.impact}</p>
                        </div>
                    </div>
                </div>
            `;
        }
        
        currentWeatherHtml += `
                </div>
            </div>
        `;
        
        document.getElementById('current-weather').innerHTML = currentWeatherHtml;
        
        // Impacto na agricultura
        const impactData = analysisModel.getAgriculturalImpactScore();
        
        if (impactData) {
            let impactHtml = `
                <div class="mb-3">
                    <div class="h5">Avaliação Geral: ${impactData.assessment || 'Desconhecido'}</div>
                    <div class="progress mb-2">
                        <div class="progress-bar ${WeatherService.getImpactClass(impactData.assessment)}" style="width: ${((impactData.score || 0) / (impactData.max_score || 20)) * 100}%">
                            ${impactData.score || 0}/${impactData.max_score || 20}
                        </div>
                    </div>
                </div>
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>${impactData.recommendations || 'Sem recomendações específicas disponíveis.'}
                </div>
                
                <!-- Escala de pontuação para impacto agrícola -->
                <div class="mt-3 mb-2">
                    <h6 class="fw-bold">Escala de Impacto Agrícola</h6>
                    <div class="d-flex justify-content-between small text-muted mb-1">
                        <span>Desfavorável</span>
                        <span>Marginal</span>
                        <span>Aceitável</span>
                        <span>Favorável</span>
                        <span>Ótimo</span>
                    </div>
                    <div class="progress" style="height: 20px;">
                        <div class="progress-bar bg-danger" style="width: 20%" data-bs-toggle="tooltip" title="Desfavorável (<8)"></div>
                        <div class="progress-bar bg-warning" style="width: 20%" data-bs-toggle="tooltip" title="Marginal (8-11)"></div>
                        <div class="progress-bar bg-info" style="width: 20%" data-bs-toggle="tooltip" title="Aceitável (12-15)"></div>
                        <div class="progress-bar bg-primary" style="width: 20%" data-bs-toggle="tooltip" title="Favorável (16-19)"></div>
                        <div class="progress-bar bg-success" style="width: 20%" data-bs-toggle="tooltip" title="Ótimo (20)"></div>
                    </div>
                    <div class="mt-2 small">
                        <p>Score atual: <strong>${impactData.score || 0}</strong> pontos de ${impactData.max_score || 20} possíveis (${impactData.assessment || 'não classificado'})</p>
                        <p>Os fatores considerados para este score incluem temperatura, umidade, vento e condições meteorológicas gerais.</p>
                    </div>
                </div>
            `;
            
            document.getElementById('weather-impact').innerHTML = impactHtml;
            
            // Inicializar os tooltips do Bootstrap
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        } else {
            document.getElementById('weather-impact').innerHTML = '<div class="alert alert-warning">Informações de impacto agrícola não disponíveis</div>';
        }
    }
    
    /**
     * Renderiza as recomendações
     * @param {Object} recommendations - Dados de recomendações
     */
    renderRecommendations(recommendations) {
        if (!recommendations || !recommendations.data || !recommendations.data.summary) {
            document.getElementById('recommendation-summary').innerHTML = '<div class="alert alert-warning">Nenhuma recomendação disponível</div>';
            document.getElementById('basic-recommendations').innerHTML = '';
            document.getElementById('specific-recommendations').innerHTML = '';
            document.getElementById('inputs-recommendations').innerHTML = '';
            return;
        }
        
        const data = recommendations.data;
        
        // Resumo
        const summary = data.summary;
        let summaryHtml = `
            <div class="mb-3">
                <h5>${summary.overall_assessment}</h5>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="recommendation-box ${summary.can_apply_chemicals ? 'border-success' : 'border-danger'}">
                        <h6>${summary.can_apply_chemicals ? 'Aplicação Possível' : 'Evitar Aplicação'}</h6>
                        <p class="mb-0">Condições para aplicação de defensivos</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="recommendation-box ${summary.needs_irrigation ? 'border-info' : 'border-secondary'}">
                        <h6>${summary.needs_irrigation ? 'Irrigação Recomendada' : 'Irrigação Opcional'}</h6>
                        <p class="mb-0">Status de necessidade hídrica</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="recommendation-box ${summary.ideal_for_fieldwork ? 'border-success' : 'border-warning'}">
                        <h6>${summary.ideal_for_fieldwork ? 'Condições Ideais' : 'Condições Limitantes'}</h6>
                        <p class="mb-0">Status para trabalho em campo</p>
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('recommendation-summary').innerHTML = summaryHtml;
        
        // Recomendações básicas
        const basic = data.basic;
        if (basic) {
            let basicHtml = `
                <ul class="list-group">
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-tint me-2"></i>Irrigação</div>
                        <p class="mb-0">${basic.irrigation}</p>
                    </li>
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-spray-can me-2"></i>Aplicação de Defensivos</div>
                        <p class="mb-0">${basic.chemicals_application}</p>
                    </li>
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-users me-2"></i>Trabalho de Campo</div>
                        <p class="mb-0">${basic.fieldwork}</p>
                    </li>
                </ul>
            `;
            
            document.getElementById('basic-recommendations').innerHTML = basicHtml;
        }
        
        // Recomendações específicas
        const specific = data.specific;
        if (specific) {
            let specificHtml = '<ul class="list-group">';
            
            if (specific.pest_management) {
                specificHtml += `
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-bug me-2"></i>Manejo de Pragas</div>
                        <p class="mb-0">${specific.pest_management}</p>
                    </li>
                `;
            }
            
            if (specific.variety_specific) {
                specificHtml += `
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-seedling me-2"></i>Variedade</div>
                        <p class="mb-0">${specific.variety_specific}</p>
                    </li>
                `;
            }
            
            if (specific.cycle_specific) {
                specificHtml += `
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-sync me-2"></i>Ciclo</div>
                        <p class="mb-0">${specific.cycle_specific}</p>
                    </li>
                `;
            }
            
            if (specific.growth_stage) {
                specificHtml += `
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-leaf me-2"></i>Estágio de Crescimento</div>
                        <p class="mb-0">${specific.growth_stage}</p>
                    </li>
                `;
            }
            
            if (specific.harvest) {
                specificHtml += `
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-truck-loading me-2"></i>Colheita</div>
                        <p class="mb-0">${specific.harvest}</p>
                    </li>
                `;
            }
            
            specificHtml += '</ul>';
            
            document.getElementById('specific-recommendations').innerHTML = specificHtml;
        }
        
        // Recomendações de insumos
        const inputs = data.inputs_management;
        if (inputs) {
            let inputsHtml = `
                <ul class="list-group">
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-flask me-2"></i>Herbicida</div>
                        <p class="mb-0">${inputs.herbicide}</p>
                    </li>
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-vial me-2"></i>Fertilizante</div>
                        <p class="mb-0">${inputs.fertilizer}</p>
                    </li>
                    <li class="list-group-item">
                        <div class="fw-bold"><i class="fas fa-cogs me-2"></i>Tecnologia de Aplicação</div>
                        <p class="mb-0">${inputs.application_technology}</p>
                    </li>
                </ul>
            `;
            
            document.getElementById('inputs-recommendations').innerHTML = inputsHtml;
        }
        
        // Renderizar seções adicionais se disponíveis
        this._renderAdditionalRecommendations(data);
    }
    
    /**
     * Renderiza seções adicionais de recomendações
     * @param {Object} data - Dados de recomendações
     * @private
     */
    _renderAdditionalRecommendations(data) {
        // MONITORAMENTO E OTIMIZAÇÃO
        const monitoring = data.monitoring_optimization;
        if (monitoring && Object.keys(monitoring).length > 0) {
            // Criar seção para monitoramento se não existir
            if (!document.getElementById('monitoring-section')) {
                const monitoringSection = document.createElement('div');
                monitoringSection.id = 'monitoring-section';
                monitoringSection.className = 'card mb-4';
                monitoringSection.innerHTML = `
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">Monitoramento e Otimização</h5>
                    </div>
                    <div class="card-body" id="monitoring-content"></div>
                `;
                
                // Adicionar após a seção de manejo de insumos
                const inputsSection = document.getElementById('inputs-recommendations').closest('.card');
                inputsSection.parentNode.insertBefore(monitoringSection, inputsSection.nextSibling);
            }
            
            // Preencher o conteúdo de monitoramento
            let monitoringHtml = `<div class="row">`;
            
            // Estresse térmico
            if (monitoring.heat_stress) {
                monitoringHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-temperature-high me-2"></i>Condição Térmica</h6>
                            </div>
                            <div class="card-body">
                                <p>${monitoring.heat_stress}</p>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Recomendação de irrigação
            if (monitoring.irrigation_advice) {
                monitoringHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-tint me-2"></i>Recomendação de Irrigação</h6>
                            </div>
                            <div class="card-body">
                                <p>${monitoring.irrigation_advice}</p>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Recomendação de herbicida
            if (monitoring.herbicide_advice) {
                monitoringHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-spray-can me-2"></i>Recomendação de Herbicida</h6>
                            </div>
                            <div class="card-body">
                                <p>${monitoring.herbicide_advice}</p>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Operações de campo
            if (monitoring.field_operations) {
                monitoringHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-tractor me-2"></i>Operações de Campo</h6>
                            </div>
                            <div class="card-body">
                                <p>${monitoring.field_operations}</p>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            monitoringHtml += `</div>`;
            
            document.getElementById('monitoring-content').innerHTML = monitoringHtml;
        }
        
        // IMPACTO AMBIENTAL
        const environmental = data.environmental_impact;
        if (environmental && Object.keys(environmental).length > 0) {
            // Criar seção para impacto ambiental se não existir
            if (!document.getElementById('environmental-section')) {
                const envSection = document.createElement('div');
                envSection.id = 'environmental-section';
                envSection.className = 'card mb-4';
                envSection.innerHTML = `
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">Impacto Ambiental</h5>
                    </div>
                    <div class="card-body" id="environmental-content"></div>
                `;
                
                // Adicionar após a seção de monitoramento ou insumos
                const prevSection = document.getElementById('monitoring-section') || 
                                    document.getElementById('inputs-recommendations').closest('.card');
                prevSection.parentNode.insertBefore(envSection, prevSection.nextSibling);
            }
            
            // Preencher o conteúdo de impacto ambiental
            let envHtml = `<div class="row">`;
            
            // Risco de deriva
            if (environmental.drift_risk) {
                envHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-wind me-2"></i>Risco de Deriva</h6>
                            </div>
                            <div class="card-body">
                                <p>${environmental.drift_risk}</p>
                                ${environmental.drift_recommendation ? `<p class="text-muted">${environmental.drift_recommendation}</p>` : ''}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Contaminação da água
            if (environmental.water_contamination) {
                envHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-water me-2"></i>Risco de Contaminação</h6>
                            </div>
                            <div class="card-body">
                                <p>${environmental.water_contamination}</p>
                                ${environmental.water_recommendation ? `<p class="text-muted">${environmental.water_recommendation}</p>` : ''}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Impacto no solo
            if (environmental.soil_impact) {
                envHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0"><i class="fas fa-mountain me-2"></i>Impacto no Solo</h6>
                            </div>
                            <div class="card-body">
                                <p>${environmental.soil_impact}</p>
                                ${environmental.soil_recommendation ? `<p class="text-muted">${environmental.soil_recommendation}</p>` : ''}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            envHtml += `</div>`;
            
            document.getElementById('environmental-content').innerHTML = envHtml;
        }
    }

    /**
     * Este código deve ser adicionado ao arquivo static/js/views/analysis.view.js
     * Na função renderCultureStats ou onde o gráfico é inicializado
     */

    // Adicionar após a renderização do gráfico estatístico
    adjustGraphicsContainer() {
      // Seletor para o contêiner principal de gráficos
      const graphicsContainer = document.querySelector('#tab-stats');
      if (!graphicsContainer) return;
      
      // Adicionar classes para melhorar o comportamento responsivo
      graphicsContainer.classList.add('graphics-container-responsive');
      
      // Injetar estilos CSS específicos para o contêiner de gráficos
      if (!document.getElementById('graphics-container-styles')) {
        const styleEl = document.createElement('style');
        styleEl.id = 'graphics-container-styles';
        styleEl.textContent = `
          /* Estilos para o contêiner principal de gráficos */
          .graphics-container-responsive {
            display: flex;
            flex-direction: column;
            height: auto !important;

            min-height: 200px;
            max-height: none !important;
            overflow: visible;
          }
          
          /* Ajustes para o card do gráfico */
          .graphics-container-responsive .card {
            height: auto;
            margin-bottom: 1rem;
          }
          
          /* Garantir que o cabeçalho do gráfico sempre seja visível */
          .graphics-container-responsive .card-header {
            position: sticky;
            top: 0;
            z-index: 1;
            background-color: #fff;
          }
          
          /* Melhorar o layout da legenda */
          .graphics-container-responsive .card-footer {
            padding: 0.5rem !important;
          }
          
          /* Garantir que a tab de estatísticas tenha altura suficiente */
          #tab-stats {
            min-height: 500px;
            height: auto !important;
            overflow: visible;
          }
          
          /* Ajustes para telas pequenas */
          @media (max-width: 768px) {
            .graphics-container-responsive .card-body {
              padding: 0.5rem;
            }
            
            .graphics-container-responsive .chart-wrapper {
              height: 300px !important;
            }
          }
        `;
        document.head.appendChild(styleEl);
      }
      
      // Garantir que os contêineres pai também sejam responsivos
      const tabs = document.querySelector('.tab-content');
      if (tabs) {
        tabs.style.height = 'auto';
        tabs.style.minHeight = '500px';
        tabs.style.overflow = 'visible';
      }
      
      // Ajustar explicitamente o contêiner do gráfico
      const statsChart = document.getElementById('stats-chart');
      if (statsChart) {
        statsChart.style.height = 'auto';
        statsChart.style.minHeight = '350px';
        statsChart.style.overflow = 'visible';
      }
      
      // Certifique-se que o gráfico é reajustado quando a tab é mostrada
      document.querySelectorAll('#analysisTabs .nav-link').forEach(tab => {
        tab.addEventListener('shown.bs.tab', (e) => {
          if (e.target.getAttribute('href') === '#tab-stats') {
            // Força o redimensionamento do gráfico
            if (window.statsChart) {
              setTimeout(() => {
                window.statsChart.resize();
              }, 50);
            }
          }
        });
      });
    }

    /**
     * Renderiza estatísticas da cultura
     * @param {AnalysisModel} analysisModel - Modelo de análise
     */
    renderCultureStats(analysisModel) {
        const culture = analysisModel.cultureInfo;
        const statsContainer = document.getElementById('culture-stats');
        const projectionsContainer = document.getElementById('culture-projections');
        
        // Obter estatísticas
        const stats = analysisModel.stats || {};
        const sugarcaneSpecific = stats.sugarcane_specific || null;
        
        // Informações da cultura
        let statsHtml = `
            <div class="table-responsive">
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <th>Tipo de Cultura</th>
                            <td>${culture.tipo || 'Desconhecido'}</td>
                        </tr>
                        <tr>
                            <th>Área</th>
                            <td>${culture.area || 0} hectares</td>
                        </tr>
                        <tr>
                            <th>Espaçamento</th>
                            <td>${culture.espacamento || 0} metros</td>
                        </tr>
                        <tr>
                            <th>Linhas Calculadas</th>
                            <td>${culture.linhas_calculadas || stats.linhas_calculadas || stats.linhas_plantio || 'Não calculado'}</td>
                        </tr>
                        <tr>
                            <th>Comprimento da Linha</th>
                            <td>${stats.comprimento_linha || 0} metros</td>
                        </tr>
                        <tr>
                            <th>Total Metros Lineares</th>
                            <td>${stats.metros_lineares || stats.metros_lineares_total || 0} metros</td>
                        </tr>
        `;
        
        // Adicionar informações específicas para cana-de-açúcar
        if (sugarcaneSpecific) {
            statsHtml += `
                        <tr>
                            <th>Ciclo</th>
                            <td>${sugarcaneSpecific.ciclo || culture.ciclo} (${sugarcaneSpecific.duracao})</td>
                        </tr>
                        <tr>
                            <th>Descrição do Ciclo</th>
                            <td>${sugarcaneSpecific.descricao}</td>
                        </tr>
            `;
        }
        
        statsHtml += `
                    </tbody>
                </table>
            </div>
        `;
        
        statsContainer.innerHTML = statsHtml;
        
        // Projeções e produtividade
        const productivityData = analysisModel.getFormattedProductivity();
        const efficiencyMetrics = stats.efficiency_metrics || {};
        
        // Dados de insumos
        let insumosData = {};
        if (stats.insumos_totais) {
            insumosData = stats.insumos_totais;
        } else {
            insumosData = {
                herbicida: `${culture.quantidade_herbicida || 0} L`,
                fertilizante: `${culture.quantidade_fertilizante || 0} kg`
            };
        }
        
        let projectionsHtml = `
            <div class="table-responsive">
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <th>Estimativa de Produção</th>
                            <td>${productivityData.value} ${productivityData.unit}<br>
                            Total: ${productivityData.total} ${productivityData.totalUnit}</td>
                        </tr>
                        <tr>
                            <th>Insumos Necessários</th>
                            <td>
                                Herbicida: ${insumosData.herbicida || '0 L'}<br>
                                Fertilizante: ${insumosData.fertilizante || '0 kg'}
                            </td>
                        </tr>
                        <tr>
                            <th>Período Ideal</th>
                            <td>${analysisModel.productivity.optimal_period || 'Não definido'}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            ${efficiencyMetrics.water_use || efficiencyMetrics.herbicide_use ? `
            <div class="mt-3">
                <h6>Métricas de Eficiência:</h6>
                <ul class="list-group">
                    ${efficiencyMetrics.water_use ? `<li class="list-group-item">${efficiencyMetrics.water_use}</li>` : ''}
                    ${efficiencyMetrics.herbicide_use ? `<li class="list-group-item">${efficiencyMetrics.herbicide_use}</li>` : ''}
                </ul>
            </div>
            ` : ''}
        `;
        
        projectionsContainer.innerHTML = projectionsHtml;

        this.adjustGraphicsContainer();
    }
}

